{
    "docs": [
        {
            "location": "/",
            "text": "Python \u5b9e\u7528\u5de5\u5177\u51fd\u6570\n->\n\n\n\u6b64\u9879\u76ee\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u5c06\u5e73\u65f6\u7528\u5230\u7684\u4e00\u4e9b\u5de5\u5177\u51fd\u6570\u96c6\u5408\u8d77\u6765\uff0c\u65b9\u4fbf\u4f7f\u7528\n\n\n\u5b89\u88c5\n->\n\n\n$ pip install pyut\n\n\n\n\n\nLICENSE\n->\n\n\nMIT \n@chenjiandongx",
            "title": "Python \u5b9e\u7528\u5de5\u5177\u51fd\u6570"
        },
        {
            "location": "/#python",
            "text": "\u6b64\u9879\u76ee\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u5c06\u5e73\u65f6\u7528\u5230\u7684\u4e00\u4e9b\u5de5\u5177\u51fd\u6570\u96c6\u5408\u8d77\u6765\uff0c\u65b9\u4fbf\u4f7f\u7528",
            "title": "Python \u5b9e\u7528\u5de5\u5177\u51fd\u6570"
        },
        {
            "location": "/#_1",
            "text": "$ pip install pyut",
            "title": "\u5b89\u88c5"
        },
        {
            "location": "/#license",
            "text": "MIT  @chenjiandongx",
            "title": "LICENSE"
        },
        {
            "location": "/memoryit/",
            "text": "memoryit.py\n->\n\n\n\n\n\u7528\u4e8e\u8ffd\u8e2a\u4ee3\u7801\u5185\u5b58\u6d88\u8017\u60c5\u51b5\n\n\n\n\nmemoryit\n->\n\n\n\n\nmemoryit(group_by='lineno', limit=10)\n\n\n\n\n\u8ffd\u8e2a\u51fd\u6570\u5185\u5b58\u6d88\u8017\u60c5\u51b5\n\n\n\n\ngroup_by: \u7edf\u8ba1\u5206\u7ec4\uff0c\u6709 'filename', 'lineno', 'traceback' \u53ef\u9009\n\n\nlimit: \u9650\u5236\u8f93\u51fa\u884c\u6570\n\n\n\n\n\u7528\u6cd5\n\n\nfrom\n \npython_utils\n \nimport\n \nmemoryit\n\n\n\n@memoryit.memoryit\n()\n\n\ndef\n \ntest\n():\n\n    \nfor\n \ni\n \nin\n \nrange\n(\n100000\n):\n\n        \ni\n \n+=\n \n1\n\n\ntest\n()\n\n\n\n\n\n\n\u8f93\u51fa\n\n\nTraceMalloc \nfor\n test\n()\n\nC:\n\\U\nsers\n\\c\nhenjiandongx\n\\A\nnaconda3\n\\l\nib\n\\t\nracemalloc.py:387: \nsize\n=\n536\n B \n(\n+536 B\n)\n, \ncount\n=\n3\n \n(\n+3\n)\n, \naverage\n=\n179\n B\nD:/Python/python-utils/utils/memoryit.py:34: \nsize\n=\n440\n B \n(\n+440 B\n)\n, \ncount\n=\n1\n \n(\n+1\n)\n, \naverage\n=\n440\n B\nC:\n\\U\nsers\n\\c\nhenjiandongx\n\\A\nnaconda3\n\\l\nib\n\\t\nracemalloc.py:524: \nsize\n=\n56\n B \n(\n+56 B\n)\n, \ncount\n=\n1\n \n(\n+1\n)\n, \naverage\n=\n56\n B\nC:\n\\U\nsers\n\\c\nhenjiandongx\n\\A\nnaconda3\n\\l\nib\n\\t\nracemalloc.py:281: \nsize\n=\n40\n B \n(\n+40 B\n)\n, \ncount\n=\n1\n \n(\n+1\n)\n, \naverage\n=\n40\n B\n\n\n\n\n\nmemoryit_block\n->\n\n\n\n\nmemoryit_block(group_by='lineno', limit=10, label='code block')\n\n\n\n\n\u8ffd\u8e2a\u4ee3\u7801\u5757\u5185\u5b58\u6d88\u8017\u60c5\u51b5\n\n\n\n\ngroup_by: \u7edf\u8ba1\u5206\u7ec4\uff0c\u6709 'filename', 'lineno', 'traceback' \u53ef\u9009\n\n\nlimit: \u9650\u5236\u8f93\u51fa\u884c\u6570\n\n\nlabel: \u4ee3\u7801\u5757\u6807\u7b7e\n\n\n\n\n\u7528\u6cd5\n\n\nfrom\n \npython_utils\n \nimport\n \nmemoryit\n\n\n\n\nwith\n \nmemoryit\n.\nmemoryit_block\n():\n\n    \nfor\n \ni\n \nin\n \nrange\n(\n100000\n):\n\n        \ni\n \n+=\n \n1\n\n\n\n\n\n\n\u8f93\u51fa\n\n\nTraceMalloc \nfor\n code block\nC:\n\\U\nsers\n\\c\nhenjiandongx\n\\A\nnaconda3\n\\l\nib\n\\t\nracemalloc.py:387: \nsize\n=\n608\n B \n(\n+608 B\n)\n, \ncount\n=\n4\n \n(\n+4\n)\n, \naverage\n=\n152\n B\nD:/Python/python-utils/utils/memoryit.py:63: \nsize\n=\n604\n B \n(\n+604 B\n)\n, \ncount\n=\n2\n \n(\n+2\n)\n, \naverage\n=\n302\n B\nC:\n\\U\nsers\n\\c\nhenjiandongx\n\\A\nnaconda3\n\\l\nib\n\\t\nracemalloc.py:524: \nsize\n=\n504\n B \n(\n+504 B\n)\n, \ncount\n=\n2\n \n(\n+2\n)\n, \naverage\n=\n252\n B\nC:\n\\U\nsers\n\\c\nhenjiandongx\n\\A\nnaconda3\n\\l\nib\n\\t\nracemalloc.py:281: \nsize\n=\n40\n B \n(\n+40 B\n)\n, \ncount\n=\n1\n \n(\n+1\n)\n, \naverage\n=\n40\n B",
            "title": "Memoryit"
        },
        {
            "location": "/memoryit/#memoryitpy",
            "text": "\u7528\u4e8e\u8ffd\u8e2a\u4ee3\u7801\u5185\u5b58\u6d88\u8017\u60c5\u51b5",
            "title": "memoryit.py"
        },
        {
            "location": "/memoryit/#memoryit",
            "text": "memoryit(group_by='lineno', limit=10)   \u8ffd\u8e2a\u51fd\u6570\u5185\u5b58\u6d88\u8017\u60c5\u51b5   group_by: \u7edf\u8ba1\u5206\u7ec4\uff0c\u6709 'filename', 'lineno', 'traceback' \u53ef\u9009  limit: \u9650\u5236\u8f93\u51fa\u884c\u6570   \u7528\u6cd5  from   python_utils   import   memoryit  @memoryit.memoryit ()  def   test (): \n     for   i   in   range ( 100000 ): \n         i   +=   1  test ()   \u8f93\u51fa  TraceMalloc  for  test () \nC: \\U sers \\c henjiandongx \\A naconda3 \\l ib \\t racemalloc.py:387:  size = 536  B  ( +536 B ) ,  count = 3   ( +3 ) ,  average = 179  B\nD:/Python/python-utils/utils/memoryit.py:34:  size = 440  B  ( +440 B ) ,  count = 1   ( +1 ) ,  average = 440  B\nC: \\U sers \\c henjiandongx \\A naconda3 \\l ib \\t racemalloc.py:524:  size = 56  B  ( +56 B ) ,  count = 1   ( +1 ) ,  average = 56  B\nC: \\U sers \\c henjiandongx \\A naconda3 \\l ib \\t racemalloc.py:281:  size = 40  B  ( +40 B ) ,  count = 1   ( +1 ) ,  average = 40  B",
            "title": "memoryit"
        },
        {
            "location": "/memoryit/#memoryit_block",
            "text": "memoryit_block(group_by='lineno', limit=10, label='code block')   \u8ffd\u8e2a\u4ee3\u7801\u5757\u5185\u5b58\u6d88\u8017\u60c5\u51b5   group_by: \u7edf\u8ba1\u5206\u7ec4\uff0c\u6709 'filename', 'lineno', 'traceback' \u53ef\u9009  limit: \u9650\u5236\u8f93\u51fa\u884c\u6570  label: \u4ee3\u7801\u5757\u6807\u7b7e   \u7528\u6cd5  from   python_utils   import   memoryit  with   memoryit . memoryit_block (): \n     for   i   in   range ( 100000 ): \n         i   +=   1   \u8f93\u51fa  TraceMalloc  for  code block\nC: \\U sers \\c henjiandongx \\A naconda3 \\l ib \\t racemalloc.py:387:  size = 608  B  ( +608 B ) ,  count = 4   ( +4 ) ,  average = 152  B\nD:/Python/python-utils/utils/memoryit.py:63:  size = 604  B  ( +604 B ) ,  count = 2   ( +2 ) ,  average = 302  B\nC: \\U sers \\c henjiandongx \\A naconda3 \\l ib \\t racemalloc.py:524:  size = 504  B  ( +504 B ) ,  count = 2   ( +2 ) ,  average = 252  B\nC: \\U sers \\c henjiandongx \\A naconda3 \\l ib \\t racemalloc.py:281:  size = 40  B  ( +40 B ) ,  count = 1   ( +1 ) ,  average = 40  B",
            "title": "memoryit_block"
        },
        {
            "location": "/misc/",
            "text": "misc.py\n->\n\n\n\n\n\u5404\u79cd\u6742\u9879\u5de5\u5177\u51fd\u6570\n\n\n\n\nformat_cookies\n->\n\n\n\n\nformat_cookies(path)\n\n\n\n\n\u5c06 cookie \u5b57\u7b26\u4e32\u8f6c\u5316\u4e3a\u5b57\u5178\n\n\n\n\npath: cookies \u6587\u4ef6\u8def\u5f84\uff0c\u7eaf\u6587\u672c\u6587\u4ef6\u5373\u53ef\u3002\n\n\nreturn: cookies \u5b57\u5178\n\n\n\n\n\u7528\u6cd5\n\n\nfrom\n \npython_utils\n \nimport\n \nmisc\n\n\n\nmisc\n.\nformat_cookies\n()\n\n\n\n\n\n\ndelete_empty_dir\n->\n\n\n\n\ndelete_empty_dir(directory)\n\n\n\n\n\u904d\u5386\u5220\u9664\u7a7a\u76ee\u5f55\n\n\n\n\ndirectory: \u76ee\u5f55\u8def\u5f84\n\n\n\n\n\u7528\u6cd5\n\n\nfrom\n \npython_utils\n \nimport\n \nmisc\n\n\n\nmisc\n.\ndelete_empty_dir\n()",
            "title": "Misc"
        },
        {
            "location": "/misc/#miscpy",
            "text": "\u5404\u79cd\u6742\u9879\u5de5\u5177\u51fd\u6570",
            "title": "misc.py"
        },
        {
            "location": "/misc/#format_cookies",
            "text": "format_cookies(path)   \u5c06 cookie \u5b57\u7b26\u4e32\u8f6c\u5316\u4e3a\u5b57\u5178   path: cookies \u6587\u4ef6\u8def\u5f84\uff0c\u7eaf\u6587\u672c\u6587\u4ef6\u5373\u53ef\u3002  return: cookies \u5b57\u5178   \u7528\u6cd5  from   python_utils   import   misc  misc . format_cookies ()",
            "title": "format_cookies"
        },
        {
            "location": "/misc/#delete_empty_dir",
            "text": "delete_empty_dir(directory)   \u904d\u5386\u5220\u9664\u7a7a\u76ee\u5f55   directory: \u76ee\u5f55\u8def\u5f84   \u7528\u6cd5  from   python_utils   import   misc  misc . delete_empty_dir ()",
            "title": "delete_empty_dir"
        },
        {
            "location": "/profileit/",
            "text": "profileit.py\n->\n\n\n\n\n\u7528\u4e8e\u6d4b\u8bd5\u51fd\u6570\u8fd0\u884c\u6d88\u8017\u60c5\u51b5\n\n\n\n\nprofileit\n->\n\n\n\n\nprofileit(field='cumulative')\n\n\n\n\n\u6d4b\u8bd5\u51fd\u6570\u8fd0\u884c\u6d88\u8017\u60c5\u51b5\n\n\n\n\nfield: \u8f93\u51fa\u5185\u5bb9\u6392\u5e8f\u65b9\u5f0f\u3002\u53ef\u9009\u53c2\u6570\u4e3a \"stdname\", \"calls\", \"time\", \"cumulative\"\n\n\n\n\n\u7528\u6cd5\n\n\nfrom\n \npython_utils\n \nimport\n \nprofileit\n\n\n\n@profileit.profileit\n()\n\n\ndef\n \ntest\n():\n\n    \nfor\n \ni\n \nin\n \nrange\n(\n100000\n):\n\n        \ni\n \n+=\n \n1\n\n\ntest\n()\n\n\n\n\n\n\n\u8f93\u51fa\n\n\nProfile info \nfor\n test\n()\n\n         \n2\n \nfunction\n calls in \n0\n.004 seconds\n\n   Ordered by: cumulative \ntime\n\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno\n(\nfunction\n)\n\n        \n1\n    \n0\n.004    \n0\n.004    \n0\n.004    \n0\n.004 profileit.py:30\n(\ntest\n)\n\n        \n1\n    \n0\n.000    \n0\n.000    \n0\n.000    \n0\n.000 \n{\nmethod \n'disable'\n of \n'_lsprof.Profiler'\n objects\n}\n\n\n\n   Ordered by: cumulative \ntime\n\n\nFunction                                          was called by...\nprofileit.py:30\n(\ntest\n)\n                             <-\n\n{\nmethod \n'disable'\n of \n'_lsprof.Profiler'\n objects\n}\n  <-",
            "title": "Profileit"
        },
        {
            "location": "/profileit/#profileitpy",
            "text": "\u7528\u4e8e\u6d4b\u8bd5\u51fd\u6570\u8fd0\u884c\u6d88\u8017\u60c5\u51b5",
            "title": "profileit.py"
        },
        {
            "location": "/profileit/#profileit",
            "text": "profileit(field='cumulative')   \u6d4b\u8bd5\u51fd\u6570\u8fd0\u884c\u6d88\u8017\u60c5\u51b5   field: \u8f93\u51fa\u5185\u5bb9\u6392\u5e8f\u65b9\u5f0f\u3002\u53ef\u9009\u53c2\u6570\u4e3a \"stdname\", \"calls\", \"time\", \"cumulative\"   \u7528\u6cd5  from   python_utils   import   profileit  @profileit.profileit ()  def   test (): \n     for   i   in   range ( 100000 ): \n         i   +=   1  test ()   \u8f93\u51fa  Profile info  for  test () \n          2   function  calls in  0 .004 seconds\n\n   Ordered by: cumulative  time \n\n   ncalls  tottime  percall  cumtime  percall filename:lineno ( function ) \n         1      0 .004     0 .004     0 .004     0 .004 profileit.py:30 ( test ) \n         1      0 .000     0 .000     0 .000     0 .000  { method  'disable'  of  '_lsprof.Profiler'  objects } \n\n\n   Ordered by: cumulative  time \n\nFunction                                          was called by...\nprofileit.py:30 ( test )                              <- { method  'disable'  of  '_lsprof.Profiler'  objects }   <-",
            "title": "profileit"
        },
        {
            "location": "/timeit/",
            "text": "timeit.py\n->\n\n\n\n\n\u7528\u4e8e\u6d4b\u8bd5\u4ee3\u7801\u8fd0\u884c\u65f6\u95f4\n\n\n\n\ntimeit_block\n->\n\n\n\n\ntimeit_block(unit='s', label=\"\")\n\n\n\n\n\u6d4b\u8bd5\u4ee3\u7801\u5757\u65f6\u95f4\n\n\n\n\nunit: \u65f6\u95f4\u5355\u4f4d\uff0c\u6709 's','m','h' \u53ef\u9009\uff08seconds\uff0cminutes\uff0chours\uff09\n\n\nlabel: \u4ee3\u7801\u5757\u6807\u7b7e\n\n\n\n\n\u7528\u6cd5\n\n\nfrom\n \npython_utils\n \nimport\n \ntimeit\n\n\n\nwith\n \ntimeit\n.\ntimeit_block\n():\n\n    \nfor\n \ni\n \nin\n \nrange\n(\n100000\n):\n\n        \ni\n \n+=\n \n1\n\n\n\n\n\n\n\u8f93\u51fa\n\n\nTotal \ntime\n running : \n0\n.008527040481567383 seconds\n\n\n\n\n\ntimeit\n->\n\n\n\n\ntimeit(unit='s')\n\n\n\n\n\u6d4b\u8bd5\u51fd\u6570\u8017\u65f6\n\n\n\n\nunit: \u65f6\u95f4\u5355\u4f4d\uff0c\u6709 's','m','h' \u53ef\u9009\uff08seconds\uff0cminutes\uff0chours\uff09\n\n\n\n\n\u7528\u6cd5\n\n\nfrom\n \npython_utils\n \nimport\n \ntimeit\n\n\n\n@timeit.timeit\n()\n\n\ndef\n \ntest\n():\n\n    \nfor\n \ni\n \nin\n \nrange\n(\n100000\n):\n\n        \ni\n \n+=\n \n1\n\n\ntest\n()\n\n\n\n\n\n\n\u8f93\u51fa\n\n\nTotal \ntime\n running : \n0\n.008527040481567383 seconds",
            "title": "Timeit"
        },
        {
            "location": "/timeit/#timeitpy",
            "text": "\u7528\u4e8e\u6d4b\u8bd5\u4ee3\u7801\u8fd0\u884c\u65f6\u95f4",
            "title": "timeit.py"
        },
        {
            "location": "/timeit/#timeit_block",
            "text": "timeit_block(unit='s', label=\"\")   \u6d4b\u8bd5\u4ee3\u7801\u5757\u65f6\u95f4   unit: \u65f6\u95f4\u5355\u4f4d\uff0c\u6709 's','m','h' \u53ef\u9009\uff08seconds\uff0cminutes\uff0chours\uff09  label: \u4ee3\u7801\u5757\u6807\u7b7e   \u7528\u6cd5  from   python_utils   import   timeit  with   timeit . timeit_block (): \n     for   i   in   range ( 100000 ): \n         i   +=   1   \u8f93\u51fa  Total  time  running :  0 .008527040481567383 seconds",
            "title": "timeit_block"
        },
        {
            "location": "/timeit/#timeit",
            "text": "timeit(unit='s')   \u6d4b\u8bd5\u51fd\u6570\u8017\u65f6   unit: \u65f6\u95f4\u5355\u4f4d\uff0c\u6709 's','m','h' \u53ef\u9009\uff08seconds\uff0cminutes\uff0chours\uff09   \u7528\u6cd5  from   python_utils   import   timeit  @timeit.timeit ()  def   test (): \n     for   i   in   range ( 100000 ): \n         i   +=   1  test ()   \u8f93\u51fa  Total  time  running :  0 .008527040481567383 seconds",
            "title": "timeit"
        }
    ]
}